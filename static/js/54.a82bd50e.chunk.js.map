{"version":3,"file":"static/js/54.a82bd50e.chunk.js","mappings":"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","sources":["components/AuthPage/validation/loginValidation.ts","redux/tools/hooks.ts","components/AuthPage/validation/registerValidation.ts","components/custom/Button/Button.tsx","components/custom/Button/index.ts","components/custom/Input/Input.tsx","components/custom/Input/index.ts","components/custom/AuthModal/AuthModal.tsx","components/custom/AuthModal/index.ts","components/custom/MaskedInput/MaskedInput.tsx","components/custom/MaskedInput/index.ts","components/AuthPage/index.ts","components/AuthPage/AuthPage.tsx"],"sourcesContent":["import { object, string } from 'yup';\n\nexport const loginSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!'),\n  password: string().required('Поле обов\\'язкове!').min(6, 'Пароль має містити 6 символів'),\n});","import { TypedUseSelectorHook } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch: () => AppDispatch = useDispatch;","import { object, string } from 'yup';\n\nexport const registerSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!'),\n  firstName: string().required('Поле обов\\'язкове!'),\n  secondName: string().required('Поле обов\\'язкове!'),\n  password: string().required().min(6, 'Пароль має містити 6 символів'),\n});","type ButtonType = {\n    title?: string;\n    background?: 'transparent' | 'white' | 'black';\n    image?: string;\n    sizeBtn?: 'huge' | 'small';\n    additionalImage?: 'google' | '';\n    type?: \"button\" | \"submit\" | \"reset\" | undefined;\n    onClickHandler?: () => void;\n    disabled?: boolean;\n}\n\nexport const Button:React.FC<ButtonType> = ({ \n    title = '', \n    background = 'transparent', \n    image = '', \n    sizeBtn = 'small',\n    additionalImage = '',\n    type = 'button',\n    disabled = false,\n    onClickHandler,\n}) => {\n\n    const btnStyles = {\n        transparent: {\n            background: 'transparent',\n            color: 'black'\n        },\n        black: {\n            background: 'bg-black',\n            color: 'text-white',\n        },\n        white: {\n            background: 'bg-white',\n            color: 'text-black',\n        },\n        huge: 'px-6 py-5 w-full',\n        small: 'p-2 size-10',\n        google: {\n            additionalImage: \"bg-[url('/src/images/EnterIcon.svg')]\",\n        }\n    };\n\n    const btnStyle = `block border disabled:bg-[#9AA5B1] disabled:border-0 ` + \n    ` hover:bg-[#BBEE85] outline-black transition duration-300 ease-in-out` + \n    `border-black ${btnStyles[background].background} ${btnStyles[sizeBtn]}`;\n\n    return (<button\n        type={type}\n        className={btnStyle}\n        onClick={onClickHandler}\n        disabled={disabled}\n        >\n        {title && (\n            <div className=\"flex justify-center items-center gap-2\">\n                <p className={`block text-xl text-nowrap ${btnStyles[background].color}`}>\n                    {title}\n                </p>\n\n                {additionalImage && <div className=\"relative block size-6\">\n                    <div className={`absolute block size-full ${btnStyles[additionalImage].additionalImage} bg-cover`}></div>\n                </div>}\n            </div>\n        )}\n\n        {image && (\n            <div className=\"relative block w-full pb-[100%]\">\n                <div className={`absolute block size-full bg-[url('/src/images/Back.svg')] bg-cover`}></div>\n            </div>\n        )}\n    </button>);\n}","import { Button } from \"./Button\";\n\nexport default Button;","import classNames from 'classnames';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    value: string;\n    setValue: (arg: string) => void;\n    errors: string[];\n};\n\nexport const Input: React.FC<InputType> = ({ type, placeholder, name, value, setValue, errors }) => {\n    const isInvalid = errors.length > 0;\n\n    return (\n    <div>\n        <input \n            type={type} \n            placeholder={placeholder} \n            name={name} \n            id={name} \n            value={value} \n            onChange={e => setValue(e.target.value)}\n            className={classNames(\n                \"block \" +\n                \"size-full \" + \n                \"px-6 \" +\n                \"py-5 \" +\n                \"bg-white \" +\n                \"font-lato \" +\n                \"font-medium \" +\n                \"font-base \" +\n                \"text-[#525A63] \" +\n                \"outline-none \" +\n                \"focus:border-2 focus:border-black \", \n                { 'border-2 border-[#E4E7EE]' : !isInvalid },\n                { 'border-2 border-[#B20508]': isInvalid }\n                )\n            }\n        />\n        \n        {isInvalid && <p className=\"font-medium font-lato text-sm pl-4\">{errors[0]}</p>}\n    </div>)\n}","import { Input } from \"./Input\";\n\nexport default Input;","import { forwardRef, useImperativeHandle, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport Button from \"../Button\";\n\ntype ModalType = {\n    title: string;\n    description?: string;\n    leftBtnText: string;\n    rightBtnText: string;\n}\n\nexport type ModalRefType = {\n    showModal: (props: ModalType) => void;\n    hideModal: () => void;\n};\n\nexport const AuthModal: React.ForwardRefExoticComponent<React.RefAttributes<unknown>> = forwardRef(\n    (props, ref) => {\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [leftBtnText, setLeftBtnText] = useState('');\n    const [rightBtnText, setRightBtnText] = useState('');\n\n    const dialogRef = useRef<HTMLDialogElement>(null);\n\n    const modalStyles = \"absolute top-1/2 left-1/2 translate-y-[-50%] translate-x-[-50%]\" + \n    \" border border-2 bg-white p-10 backdrop:bg-black/40 w-max\";\n\n    useImperativeHandle(ref, () => ({\n        showModal: ({ title, description, leftBtnText, rightBtnText }: ModalType) => {\n            if (dialogRef.current) {\n                setTitle(title);\n                setDescription(description || '');\n                setLeftBtnText(leftBtnText);\n                setRightBtnText(rightBtnText);\n\n                dialogRef.current.showModal();\n            }\n        },\n\n        hideModal: () => {\n            if (dialogRef.current) {\n                dialogRef.current.close();\n            }\n        }\n    }));\n\n    const onClose = () => {\n        if (dialogRef.current) {\n            dialogRef.current.close();\n        }\n    }\n\n    return (createPortal(<dialog\n            ref={dialogRef}\n            className={modalStyles}\n        >\n            <div className=\"flex flex-col gap-6\">\n                <div className=\"block w-32\">\n                    <div className=\"relative block size-full pb-[77%]\">\n                        <div className=\"absolute size-full bg-[url('/src/images/Hendcheese.svg')] bg-cover\"></div>\n                    </div>\n                </div>\n\n                <div>\n                    <h1 className=\"block uppercase font-oswald font-medium tracking-tighter text-3xl\">{title}</h1>\n                    {description && (\n                        <p className=\"block pt-2 text-[#525A63] font-semibold font-base font-lato\">{description}</p>\n                    )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-x-3\">\n                    <Button\n                        sizeBtn=\"huge\"\n                        title={leftBtnText}\n                        background=\"white\"\n                        onClickHandler={onClose}\n                    />\n\n                    <Button\n                        sizeBtn=\"huge\"\n                        title={rightBtnText}\n                        background=\"black\"\n                        onClickHandler={onClose}\n                    />\n                </div>\n            </div>\n        </dialog>,\n        document.getElementsByTagName('body')[0]\n    ));\n});","import { AuthModal } from \"./AuthModal\";\n\nexport default AuthModal;","import { LegacyRef } from 'react';\nimport { IMaskMixin } from 'react-imask';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    value: string;\n    setValue: (arg: string) => void;\n    errors: string[];\n};\n\nexport const MaskedInput = IMaskMixin(({ inputRef, ...props }) => {\n    const { type, placeholder, name, value, setValue } = props as InputType;\n\n    return (\n        <input\n            ref={inputRef as LegacyRef<HTMLInputElement>}\n            type={type} \n            placeholder={placeholder}\n            autoComplete='off'\n            name={name} \n            id={name} \n            value={value} \n            onChange={e => setValue(e.target.value)}\n            className={\n                \"block \" +\n                \"size-full \" + \n                \"px-6 \" +\n                \"py-5 \" +\n                \"bg-white \" +\n                \"font-lato \" +\n                \"font-medium \" +\n                \"font-base \" +\n                \"text-[#525A63] \" +\n                \"outline-none \" +\n                \"border-2 border-[#E4E7EE] \" +\n                \"focus:border-2 focus:border-black \" \n            }\n        />\n    )\n})","import { MaskedInput } from \"./MaskedInput\";\n\nexport default MaskedInput;","import AuthPage from \"./AuthPage\";\n\nexport default AuthPage;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useRef, useState } from \"react\";\nimport { loginSchema } from \"./validation/loginValidation\";\nimport { LoginAction, RegisterAction } from \"../../actions/AuthActions\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/tools/hooks\";\nimport { Link, URLSearchParamsInit, useSearchParams } from \"react-router-dom\";\nimport { registerSchema } from \"./validation/registerValidation\";\nimport Button from \"../custom/Button\";\nimport Input from \"../custom/Input\";\nimport AuthModal from \"../custom/AuthModal\";\nimport { ModalRefType } from \"../custom/AuthModal/AuthModal\";\nimport { createPortal } from \"react-dom\";\nimport MaskedInput from \"../custom/MaskedInput\";\nimport * as Yup from 'yup';\n\nexport type ModeType = 'login' | 'register' | 'phone';\n\nconst AuthPage: React.FC = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [authErrors, setAuthErrors] = useState<{[key: string]: string[]}>({});\n    const [firstName, setFirstName] = useState('');\n    const [secondName, setSecondName] = useState('');\n    const [phone, setPhone] = useState('');\n\n    const modalRef = useRef<ModalRefType>();\n    \n    const auth = useAppSelector(state => state.auth);\n    const dispatch = useAppDispatch();\n\n    const [search, setSearchParams] = useSearchParams();\n    \n    const mode: ModeType = search.get('mode') as ModeType;\n    const bottomLinkStyles = 'block font-normal font-lato text-xl';\n    const link = {\n        login: 'register',\n        register: 'login',\n    }\n\n    const title = {\n        login: {\n            title: 'Увійдіть в аккаунт',\n            description: 'Щоб отримати знижки, збереження історії замовлень, швидкий доступ до профілю та відстеження замовлень',\n        },\n        register: {\n            title: 'Зареєструйтесь',\n            description: 'Щоб отримати знижки, збереження історії замовлень, швидкий доступ до профілю та відстеження замовлень',\n        },\n        phone: {\n            title: 'додайте номер телефону',\n            description: 'Щоб завершити реєстрацію',\n        }\n    }\n\n    const authHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        try {\n            if (mode !== 'login' && mode !== 'register' && mode !== 'phone')\n                return;\n\n            if (mode === 'login') {\n                const validatedData = await loginSchema.validate({\n                    email,\n                    password\n                }, { abortEarly: false });\n                \n                if (modalRef.current) {\n                    modalRef.current.showModal({\n                        title: \"З поверненням!\",\n                        leftBtnText: \"Переглянути профіль\", \n                        rightBtnText: \"Перейти до замовлення\"\n                    });\n                }\n    \n                // dispatch(LoginAction(validatedData));\n            } \n            else if (mode === 'register') {\n                const validatedData = await registerSchema.validate({\n                    email,\n                    password,\n                    firstName,\n                    secondName\n                }, { abortEarly: false });\n\n                const urlSearch = new URLSearchParams(search.toString());\n\n                urlSearch.set('mode', 'phone')\n\n                setSearchParams(urlSearch.toString());\n\n                // dispatch(RegisterAction(validatedData));\n            } \n            else if (mode === 'phone') {\n                const validatedData = await loginSchema.validate({\n                    firstName,\n                    secondName,\n                    email,\n                    password\n                });\n\n                const unmaskedValue = phone.replace(/\\D/g, '').slice(2);\n                \n                if (unmaskedValue.length === 10 && modalRef.current) {\n                    modalRef.current.showModal({\n                        title: \"Успіх! Картопля фрі в доступі\",\n                        description: \"Ви успішно зареєструвались! Тепер ви можете користуватися усіма перевагами вашого акаунта.\",\n                        leftBtnText: \"Переглянути профіль\", \n                        rightBtnText: \"Перейти до замовлення\"\n                    });\n                }\n            }\n\n        } catch(err: any) {\n            const errors: {[key: string]: string[]} = {};\n\n            err.inner.forEach((item: Yup.ValidationError) => {\n                if (item.path) {\n                    errors[item.path] = item.errors;\n                }\n            });\n\n            setAuthErrors(errors);\n        }\n    }\n\n    const discardErrors = (type: string) => {\n        setAuthErrors(prev => ({\n            ...prev,\n            [type]: []\n        }));\n    }\n\n    return (<main className=\"block pt-6 px-10 pb-20\">\n        <section>\n            <Button image=\"Back.svg\" background=\"transparent\" />\n        </section>\n\n        <section>\n            <div className=\"grid grid-cols-12 gap-x-5 size-full\">\n                <div className=\"col-start-5 col-end-9\">\n                    <h1 className=\"uppercase font-medium tracking-tight font-oswald text-3xl\">\n                        {title[mode].title}\n                    </h1>\n\n                    <p className=\"block pt-2 font-semibold text-base font-lato text-[#525A63]\">\n                        {title[mode].description}\n                    </p>\n\n                    <form onSubmit={authHandler}>\n                        <div className=\"flex flex-col gap-3 pt-6\">\n                            {mode === 'register' && (<>\n                            <Input\n                                value={firstName}\n                                placeholder=\"Ім'я\"\n                                type=\"text\"\n                                name=\"firstName\"\n                                setValue={(arg) => { setFirstName(arg); discardErrors('firstName'); }}\n                                errors={authErrors.firstName || []}\n                            />\n\n                            <Input\n                                value={secondName}\n                                placeholder=\"Прізвище\"\n                                type=\"text\"\n                                name=\"secondName\"\n                                setValue={(arg) => { setSecondName(arg); discardErrors('secondName'); }}\n                                errors={authErrors.secondName || []}\n                            /></>)}\n\n                            {mode !== 'phone' && <>\n                            <Input\n                                value={email}\n                                placeholder=\"Електронна пошта\"\n                                type=\"text\"\n                                name=\"email\"\n                                setValue={(arg) => { setEmail(arg); discardErrors('email'); }}\n                                errors={authErrors.email || []}\n                            />\n\n                            <Input\n                                value={password}\n                                placeholder=\"Пароль\"\n                                type=\"password\"\n                                name=\"password\"\n                                setValue={(arg) => { setPassword(arg); discardErrors('password'); }}\n                                errors={authErrors.password || []}\n                            /></>}\n\n                            {mode === 'phone' && (\n                                <MaskedInput\n                                    value={phone}\n                                    placeholder=\"Телефон\"\n                                    type=\"text\"\n                                    name=\"phone\"\n                                    mask={\"+38 000 000 00 00\"}\n                                    setValue={(arg: string) => { setPhone(arg); discardErrors('phone'); }}\n                                    errors={authErrors.phone || []}\n                                />\n                            )}\n                        </div>\n\n                        {mode === 'login' && <p\n                            className=\"block pt-1 text-right font-medium text-base font-lato\"\n                        >\n                            Забули пароль?\n                        </p>}\n\n                        <div className=\"flex flex-col gap-3 pt-6\">\n                            {(mode === 'login' || mode === 'register') && <>\n                            <Button\n                                title=\"Продовжити\"\n                                type=\"submit\"\n                                sizeBtn=\"huge\"\n                                background=\"black\"\n                            />\n\n                            <Button\n                                title=\"Увійти з\"\n                                sizeBtn=\"huge\"\n                                background=\"white\"\n                                additionalImage=\"google\"\n                            />\n                            </>}\n\n                            {mode === 'phone' && (\n                                <Button\n                                    title=\"Підтвердити\"\n                                    type=\"submit\"\n                                    sizeBtn=\"huge\"\n                                    background=\"black\"\n                                    disabled={!phone}\n                                />\n                            )}\n                        </div>\n                    </form>\n\n                    {mode !== 'phone' && <div className=\"flex pt-6 gap-2 justify-center\">\n                        <p className={bottomLinkStyles}>Немає аккаунта?</p>\n\n                        <Link className={bottomLinkStyles} to={`/auth?mode=${link[mode]}`}>\n                            {mode === 'login' ? 'Зареєеструватися' : 'Увійти'}\n                        </Link>\n                    </div>}\n                </div>\n            </div>\n\n            <AuthModal\n                ref={modalRef}\n            />\n\n            {createPortal(<div className=\"fixed left-[100%] top-negative-top translate-x-negative translate-y-[-100%]  w-52\">\n                <div className=\"relative flex flex-col gap-2 w-full\">\n                    <div className=\"block px-10 w-full\">\n                        <div className=\"relative block w-full pb-[169%]\">\n                            <div className=\"absolute size-full bg-[url('/src/images/Patato.svg')] bg-cover\"></div>\n                        </div>\n                    </div>\n\n                    <p className=\"block font-normal font-base font-oswald text-center\">\n                        Псс...Картопля фрі вже чекає!\n                    </p>\n                </div>\n            </div>, document.body)}\n        </section>\n    </main>)\n}\n\nexport default AuthPage;"],"names":["loginSchema","object","shape","email","string","required","password","min","useAppSelector","useSelector","useAppDispatch","useDispatch","registerSchema","firstName","secondName","_ref","title","background","image","sizeBtn","additionalImage","type","disabled","onClickHandler","btnStyles","transparent","color","black","white","huge","small","google","btnStyle","_jsxs","className","onClick","children","_jsx","placeholder","name","value","setValue","errors","isInvalid","length","id","onChange","e","target","classNames","forwardRef","props","ref","setTitle","useState","description","setDescription","leftBtnText","setLeftBtnText","rightBtnText","setRightBtnText","dialogRef","useRef","useImperativeHandle","showModal","current","hideModal","close","onClose","createPortal","Button","document","getElementsByTagName","IMaskMixin","inputRef","autoComplete","AuthPage","setEmail","setPassword","authErrors","setAuthErrors","setFirstName","setSecondName","phone","setPhone","modalRef","search","setSearchParams","state","auth","useSearchParams","mode","get","bottomLinkStyles","login","register","discardErrors","prev","onSubmit","async","preventDefault","stopPropagation","validate","abortEarly","urlSearch","URLSearchParams","toString","set","replace","slice","err","inner","forEach","item","path","_Fragment","Input","arg","MaskedInput","mask","Link","to","AuthModal","body"],"sourceRoot":""}