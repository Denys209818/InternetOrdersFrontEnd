{"version":3,"file":"static/js/401.1c52cf3d.chunk.js","mappings":"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","sources":["components/AuthPage/validation/loginValidation.ts","redux/tools/hooks.ts","components/AuthPage/validation/registerValidation.ts","components/custom/AuthModal/AuthModal.tsx","components/custom/AuthModal/index.ts","components/AuthPage/AuthPage.tsx","components/AuthPage/index.ts","components/custom/Input/Input.tsx","components/custom/Input/index.ts","components/custom/MaskedInput/MaskedInput.tsx","components/custom/MaskedInput/index.ts"],"sourcesContent":["import { object, string } from 'yup';\n\nexport const loginSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!'),\n  password: string().required('Поле обов\\'язкове!').min(6, 'Пароль має містити 6 символів'),\n});","import { TypedUseSelectorHook } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch: () => AppDispatch = useDispatch;","import { object, string } from 'yup';\n\nexport const registerSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!'),\n  firstName: string().required('Поле обов\\'язкове!'),\n  secondName: string().required('Поле обов\\'язкове!'),\n  password: string().required().min(6, 'Пароль має містити 6 символів'),\n});","import { forwardRef, useImperativeHandle, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport Button from \"../Button\";\n\ntype ModalType = {\n    title: string;\n    description?: string;\n    leftBtnText: string;\n    rightBtnText: string;\n}\n\nexport type ModalRefType = {\n    showModal: (props: ModalType) => void;\n    hideModal: () => void;\n};\n\nexport const AuthModal: React.ForwardRefExoticComponent<React.RefAttributes<unknown>> = forwardRef(\n    (props, ref) => {\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [leftBtnText, setLeftBtnText] = useState('');\n    const [rightBtnText, setRightBtnText] = useState('');\n\n    const dialogRef = useRef<HTMLDialogElement>(null);\n\n    const modalStyles = \"absolute top-1/2 left-1/2 translate-y-[-50%] translate-x-[-50%]\" + \n    \" border border-2 bg-white p-10 backdrop:bg-black/40 w-max\";\n\n    useImperativeHandle(ref, () => ({\n        showModal: ({ title, description, leftBtnText, rightBtnText }: ModalType) => {\n            if (dialogRef.current) {\n                setTitle(title);\n                setDescription(description || '');\n                setLeftBtnText(leftBtnText);\n                setRightBtnText(rightBtnText);\n\n                dialogRef.current.showModal();\n            }\n        },\n\n        hideModal: () => {\n            if (dialogRef.current) {\n                dialogRef.current.close();\n            }\n        }\n    }));\n\n    const onClose = () => {\n        if (dialogRef.current) {\n            dialogRef.current.close();\n        }\n    }\n\n    return (createPortal(<dialog\n            ref={dialogRef}\n            className={modalStyles}\n        >\n            <div className=\"flex flex-col gap-6\">\n                <div className=\"block w-32\">\n                    <div className=\"relative block size-full pb-[77%]\">\n                        <div className=\"absolute size-full bg-[url('/src/images/Hendcheese.svg')] bg-cover\"></div>\n                    </div>\n                </div>\n\n                <div>\n                    <h1 className=\"block uppercase font-oswald font-medium tracking-tighter text-3xl\">{title}</h1>\n                    {description && (\n                        <p className=\"block pt-2 text-[#525A63] font-semibold font-base font-lato\">{description}</p>\n                    )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-x-3 min-[375px]:gap-y-3\">\n                    <Button\n                        sizeBtn=\"huge\"\n                        title={leftBtnText}\n                        background=\"white\"\n                        onClickHandler={onClose}\n                    />\n\n                    <Button\n                        sizeBtn=\"huge\"\n                        title={rightBtnText}\n                        background=\"black\"\n                        onClickHandler={onClose}\n                    />\n                </div>\n            </div>\n        </dialog>,\n        document.getElementsByTagName('body')[0]\n    ));\n});","import { AuthModal } from \"./AuthModal\";\n\nexport default AuthModal;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useRef, useState } from \"react\";\nimport { loginSchema } from \"./validation/loginValidation\";\nimport { LoginAction, RegisterAction } from \"../../actions/AuthActions\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/tools/hooks\";\nimport { Link, useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { registerSchema } from \"./validation/registerValidation\";\nimport Button from \"../custom/Button\";\nimport Input from \"../custom/Input\";\nimport AuthModal from \"../custom/AuthModal\";\nimport { ModalRefType } from \"../custom/AuthModal/AuthModal\";\nimport MaskedInput from \"../custom/MaskedInput\";\nimport * as Yup from 'yup';\nimport * as Styles from './styles';\n\nexport type ModeType = 'login' | 'register' | 'phone';\n\nconst AuthPage: React.FC = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [authErrors, setAuthErrors] = useState<{ [key: string]: string[] }>({});\n    const [firstName, setFirstName] = useState('');\n    const [secondName, setSecondName] = useState('');\n    const [phone, setPhone] = useState('');\n\n    const modalRef = useRef<ModalRefType>();\n    const maskRef = useRef(null);\n\n    const navigate = useNavigate();\n\n    const auth = useAppSelector(state => state.auth);\n    const dispatch = useAppDispatch();\n\n    const { modeType } = useParams();\n\n    const mode: ModeType =\n        (modeType !== 'login'\n            && modeType !== 'register'\n            && modeType !== 'phone') ? 'login' : modeType as ModeType;\n\n    const bottomLinkStyles = 'block font-medium font-lato text-xl';\n    const bottomLinkStylesTablet = 'min-[375px]:block min-[375px]:font-lato';\n    const link = {\n        login: 'register',\n        register: 'login',\n    }\n\n    const title = {\n        login: {\n            title: 'Увійдіть в аккаунт',\n            description: 'Щоб отримати знижки, збереження історії замовлень, швидкий доступ до профілю та відстеження замовлень',\n        },\n        register: {\n            title: 'Зареєструйтесь',\n            description: 'Щоб отримати знижки, збереження історії замовлень, швидкий доступ до профілю та відстеження замовлень',\n        },\n        phone: {\n            title: 'додайте номер телефону',\n            description: 'Щоб завершити реєстрацію',\n        }\n    }\n\n    const authHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        try {\n            if (mode !== 'login' && mode !== 'register' && mode !== 'phone')\n                return;\n\n            if (mode === 'login') {\n                const validatedData = await loginSchema.validate({\n                    email,\n                    password\n                }, { abortEarly: false });\n\n                if (modalRef.current) {\n                    modalRef.current.showModal({\n                        title: \"З поверненням!\",\n                        leftBtnText: \"Переглянути профіль\",\n                        rightBtnText: \"Перейти до замовлення\"\n                    });\n                }\n\n                dispatch(LoginAction(validatedData));\n            }\n            else if (mode === 'register') {\n                const validatedData = await registerSchema.validate({\n                    email,\n                    password,\n                    firstName,\n                    secondName\n                }, { abortEarly: false });\n\n                navigate('../phone');\n\n                // dispatch(RegisterAction(validatedData));\n            }\n            else if (mode === 'phone') {\n                const validatedData = await loginSchema.validate({\n                    firstName,\n                    secondName,\n                    email,\n                    password\n                });\n\n                const unmaskedValue = phone.replace(/\\D/g, '').slice(2);\n\n                if (unmaskedValue.length === 10 && modalRef.current) {\n                    modalRef.current.showModal({\n                        title: \"Успіх! Картопля фрі в доступі\",\n                        description: \"Ви успішно зареєструвались! Тепер ви можете користуватися усіма перевагами вашого акаунта.\",\n                        leftBtnText: \"Переглянути профіль\",\n                        rightBtnText: \"Перейти до замовлення\"\n                    });\n                }\n            }\n\n        } catch (err: any) {\n            const errors: { [key: string]: string[] } = {};\n\n            err.inner.forEach((item: Yup.ValidationError) => {\n                if (item.path) {\n                    errors[item.path] = item.errors;\n                }\n            });\n\n            setAuthErrors(errors);\n        }\n    }\n\n    const discardErrors = (type: string) => {\n        setAuthErrors(prev => ({\n            ...prev,\n            [type]: []\n        }));\n    }\n\n    const goBack = () => {\n        navigate(-1);\n    }\n\n    return (<main className={\n        `\n        absolute\n        ${Styles.largeMainStyle} \n        ${Styles.mainStyle} \n        ${Styles.phoneMainStyle} \n        ${Styles.smallphoneMainStyle} \n        ${Styles.tabletMainStyle}\n        bg-[#BBEE85] \n        min-h-height-w-h-t \n        min-[744px]:min-h-height-w-h\n        pt-[72px]\n        w-full\n        `\n    }\n    >\n        <section>\n            <Button image=\"Back.svg\" background=\"transparent\" onClickHandler={goBack} />\n        </section>\n\n        <section>\n            <div className={`\n                ${Styles.gridStyle} \n                ${Styles.largeGridStyle} \n                ${Styles.phoneGridStyle} \n                ${Styles.tabletGridStyle} \n                ${Styles.smallphoneGridStyle}`}\n            >\n                <div className={`\n                    ${Styles.gridContainerStyle}\n                    ${Styles.largeGridContainerStyle}\n                    ${Styles.smallphoneGridContainerStyle}\n                    ${Styles.phoneGridContainerStyle} \n                    ${Styles.tabletGridContainerStyle}`}\n                >\n                    <h1 className={`\n                        ${Styles.titleStyle}\n                        ${Styles.largeTitleStyle}\n                        ${Styles.tabletTitleStyle}\n                        ${Styles.phoneTitleStyle}\n                        ${Styles.smallphoneTitleStyle}\n                        `}>\n                        {title[mode].title}\n                    </h1>\n\n                    <p className={`\n                        ${Styles.descStyle}\n                        ${Styles.largeDescStyle}\n                        ${Styles.tabletDescStyle}\n                        ${Styles.phoneDescStyle}\n                        ${Styles.smallphoneDescStyle}\n                        `}>\n                        {title[mode].description}\n                    </p>\n\n                    <form onSubmit={authHandler}>\n                        <div className={`\n                            ${Styles.formStyle}\n                            ${Styles.largeFormStyle}\n                            ${Styles.tabletFormStyle}\n                            ${Styles.phoneFormStyle}\n                            ${Styles.smallphoneFormStyle}\n                            `}>\n                            {mode === 'register' && (<>\n                                <Input\n                                    value={firstName}\n                                    placeholder=\"Ім'я\"\n                                    type=\"text\"\n                                    name=\"firstName\"\n                                    setValue={(arg) => { setFirstName(arg); discardErrors('firstName'); }}\n                                    errors={authErrors.firstName || []}\n                                />\n\n                                <Input\n                                    value={secondName}\n                                    placeholder=\"Прізвище\"\n                                    type=\"text\"\n                                    name=\"secondName\"\n                                    setValue={(arg) => { setSecondName(arg); discardErrors('secondName'); }}\n                                    errors={authErrors.secondName || []}\n                                /></>)}\n\n                            {mode !== 'phone' && <>\n                                <Input\n                                    value={email}\n                                    placeholder=\"Електронна пошта\"\n                                    type=\"text\"\n                                    name=\"email\"\n                                    setValue={(arg) => { setEmail(arg); discardErrors('email'); }}\n                                    errors={authErrors.email || []}\n                                />\n\n                                <Input\n                                    value={password}\n                                    placeholder=\"Пароль\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    setValue={(arg) => { setPassword(arg); discardErrors('password'); }}\n                                    errors={authErrors.password || []}\n                                /></>}\n\n                            {mode === 'phone' && (\n                                <MaskedInput\n                                    ref={maskRef}\n                                    placeholder=\"Телефон\"\n                                    type=\"text\"\n                                    name=\"phone\"\n                                    mask={\"+38 000 000 00 00\"}\n                                    onAccept={(value: string, mask: any) => {\n                                        setPhone(value);\n                                        discardErrors('phone');\n\n                                        mask.updateValue();\n                                    }}\n                                    onClickHandler={() => {\n                                        if (maskRef.current && !phone) {\n                                            const maskElement = maskRef.current as any;\n                                            maskElement.maskRef.value = '+38 ';\n                                            maskElement.maskRef.updateValue();\n                                        }\n                                    }}\n                                    isEmpty={phone.length === 0}\n                                    errors={authErrors.phone || []}\n                                />\n                            )}\n                        </div>\n\n                        {mode === 'login' && <p\n                            className={`\n                                ${Styles.fpStyle}\n                                ${Styles.largeFPStyle}\n                                ${Styles.tabletFPStyle}\n                                ${Styles.phoneFPStyle}\n                                ${Styles.smallphoneFPStyle}\n                                `}\n                        >\n                            Забули пароль?\n                        </p>}\n\n                        <div className={`\n                            ${Styles.btnStyle}\n                            ${Styles.largeBtnStyle}\n                            ${Styles.tabletBtnStyle}\n                            ${Styles.phoneBtnStyle}\n                            ${Styles.smallphoneBtnStyle}\n                            `}>\n                            {(mode === 'login' || mode === 'register') && <>\n                                <Button\n                                    title=\"Продовжити\"\n                                    type=\"submit\"\n                                    sizeBtn=\"huge\"\n                                    background=\"black\"\n                                />\n\n                                <Button\n                                    title=\"Увійти з\"\n                                    sizeBtn=\"huge\"\n                                    background=\"white\"\n                                    additionalImage=\"google\"\n                                />\n                            </>}\n\n                            {mode === 'phone' && (\n                                <Button\n                                    title=\"Підтвердити\"\n                                    type=\"submit\"\n                                    sizeBtn=\"huge\"\n                                    background=\"black\"\n                                    disabled={!phone}\n                                />\n                            )}\n                        </div>\n                    </form>\n\n                    {mode !== 'phone' && <div className={`\n                        ${Styles.aaStyle}\n                        ${Styles.largeAAStyle}\n                        ${Styles.tabletAAStyle}\n                        ${Styles.phoneAAStyle}\n                        ${Styles.smallphoneAAStyle}\n                        `}>\n                        <p className={bottomLinkStyles + \" \" + bottomLinkStylesTablet + \" min-[375px]:text-input\"}>Немає аккаунта?</p>\n\n                        <Link className={bottomLinkStyles + \" \" + bottomLinkStylesTablet + \" min-[375px]:text-btn\"} to={`/auth/${link[mode]}`}>\n                            {mode === 'login' ? 'Зареєструватися' : 'Увійти'}\n                        </Link>\n                    </div>}\n                </div>\n            </div>\n\n            <AuthModal\n                ref={modalRef}\n            />\n\n            {(<div className={`\n                ${Styles.dialogStyle}\n                ${Styles.largeDialogStyle}\n                ${Styles.tabletDialogStyle}\n                ${Styles.phoneDialogStyle}\n                ${Styles.smallphoneDialogStyle}\n                pt-14\n                `}>\n                <div className={`\n                    ${Styles.drStyle}\n                    ${Styles.largeDRStyle}\n                    ${Styles.tabletDRStyle}\n                    ${Styles.phoneDRStyle}\n                    ${Styles.smallphoneDRStyle}\n                    `}>\n                    <div className={`\n                        ${Styles.dsStyle}\n                        ${Styles.largeDSStyle}\n                        ${Styles.tabletDSStyle}\n                        ${Styles.phoneDSStyle}\n                        ${Styles.smallphoneDSStyle}\n                        `}>\n                        <div className=\"relative block w-full pb-[169%]\">\n                            <div className=\"absolute size-full bg-[url('/src/images/Patato.svg')] bg-cover\"></div>\n                        </div>\n                    </div>\n\n                    <p className={`\n                        ${Styles.dtStyle}\n                        ${Styles.largeDTStyle}\n                        ${Styles.tabletDTStyle}\n                        ${Styles.phoneDTStyle}\n                        ${Styles.smallphoneDTStyle}\n                        `}>\n                        Псс...Картопля фрі вже чекає!\n                    </p>\n                </div>\n            </div>)}\n        </section>\n    </main>)\n}\n\nexport default AuthPage;","import AuthPage from \"./AuthPage\";\n\nexport default AuthPage;","import classNames from 'classnames';\nimport { useState } from 'react';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    value: string;\n    setValue: (arg: string) => void;\n    errors: string[];\n};\n\nexport const Input: React.FC<InputType> = ({ type, placeholder, name, value, setValue, errors }) => {\n    const isInvalid = errors.length > 0;\n\n    const isPassword = type === 'password';\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const isEmpty = value.length === 0;\n\n    const divStyles = !isEmpty ? 'text-inputPlaceholder top-2 left-6 translate-y-0' : `\n            top-[50%]\n            translate-y-[-50%]\n            left-6\n            group-focus-within:text-inputPlaceholder\n            group-focus-within:top-2\n            group-focus-within:translate-y-0\n        `;\n    const inputStyles = !isEmpty ? 'pb-2 pt-6' : 'group-focus-within:pb-2 group-focus-within:pt-6';\n\n    return (\n    <div className='relative'>\n        <div className='relative group'>\n            <p className={`\n                absolute\n                block\n                font-lato\n                text-input\n                text-[#525A63]\n                pointer-events-none\n                duration-75\n                ${divStyles}\n            `}>\n                {placeholder}\n            </p>\n\n            <input \n                type={isPassword && showPassword ? 'text' : type} \n                name={name} \n                id={name} \n                value={value} \n                onChange={e => setValue(e.target.value)}\n                className={classNames(\n                    \"block \" +\n                    \"size-full \" + \n                    \"px-6 \" +\n                    `py-4 ${inputStyles} ` +\n                    \"bg-white \" +\n                    \"hover:bg-[#F5F7FA] hover:cursor-pointer \" +\n                    \"font-lato \" +\n                    \"text-input \" +\n                    \"text-[#525A63] \" +\n                    \"outline-none \" +\n                    \"duration-75 \" +\n                    \"autofill:bg-yellow-200 autofill:text-[#525A63] \",\n                    \"focus:border-2 focus:border-black \", \n                    { 'border-2 border-[#E4E7EE]' : !isInvalid },\n                    { 'border-2 border-[#B20508]': isInvalid }\n                    )\n                }\n            />\n        </div>\n\n        {isPassword && \n        <div \n            className='absolute left-[100%] top-0 translate-x-negative-x-eye translate-y-positive-y-eye hover:cursor-pointer'\n            onClick={() => setShowPassword(prev => !prev)}\n\n        >\n            <div className=\"relative block size-6\">\n                <div className={`absolute block size-full bg-[url('/src/images/Eye.svg')] bg-cover`}></div>\n            </div>\n        </div>}\n        \n        {isInvalid && <p className=\"font-medium font-lato text-sm pl-4\">{errors[0]}</p>}\n    </div>)\n}","import { Input } from \"./Input\";\n\nexport default Input;","import classNames from 'classnames';\nimport { LegacyRef } from 'react';\nimport { IMaskMixin } from 'react-imask';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    isEmpty: boolean;\n    errors: string[];\n    onClickHandler: () => void;\n};\n\nexport const MaskedInput = IMaskMixin(({ inputRef, ...props }) => {\n    const { type, placeholder, isEmpty, name, errors, onClickHandler } = props as InputType;\n    const isInvalid = errors.length > 0;\n\n    const divStyles = !isEmpty ? 'text-inputPlaceholder top-2 left-6 translate-y-0' : `\n            top-[27.2px]\n            translate-y-[-50%]\n            left-6\n            group-focus-within:text-inputPlaceholder\n            group-focus-within:top-2\n            group-focus-within:translate-y-0\n        `;\n    const inputStyles = !isEmpty ? 'pb-2 pt-6' : 'py-4 group-focus-within:pb-2 group-focus-within:pt-6';\n\n    return (\n        <div className=\"relative\">\n            <div className='relative group' onClick={onClickHandler}>\n                <p className={`\n                    absolute\n                    block\n                    font-lato\n                    text-input\n                    text-[#525A63]\n                    pointer-events-none\n                    duration-75\n                    ${divStyles}\n                `}>\n                    {placeholder}\n                </p>\n\n                <input\n                    ref={inputRef as LegacyRef<HTMLInputElement>}\n                    type={type}\n                    autoComplete='off'\n                    name={name}\n                    id={name}\n                    className={classNames(\n                        \"block \" +\n                        \"size-full \" +\n                        \"px-6 \" +\n                        `${inputStyles} ` +\n                        \"bg-white \" +\n                        \"font-lato \" +\n                        \"text-input \" +\n                        \"text-[#525A63] \" +\n                        \"outline-none \" +\n                        \"duration-75 \" +\n                        \"focus:border-2 focus:border-black \",\n                        { 'border-2 border-[#E4E7EE]': !isInvalid },\n                        { 'border-2 border-[#B20508]': isInvalid }\n                    )\n                    }\n                />\n            </div>\n        </div>\n    )\n})","import { MaskedInput } from \"./MaskedInput\";\n\nexport default MaskedInput;"],"names":["loginSchema","object","shape","email","string","required","password","min","useAppSelector","useSelector","useAppDispatch","useDispatch","registerSchema","firstName","secondName","forwardRef","props","ref","title","setTitle","useState","description","setDescription","leftBtnText","setLeftBtnText","rightBtnText","setRightBtnText","dialogRef","useRef","useImperativeHandle","showModal","_ref","current","hideModal","close","onClose","createPortal","_jsx","className","children","_jsxs","Button","sizeBtn","background","onClickHandler","document","getElementsByTagName","AuthPage","setEmail","setPassword","authErrors","setAuthErrors","setFirstName","setSecondName","phone","setPhone","modalRef","maskRef","navigate","useNavigate","dispatch","state","auth","modeType","useParams","mode","bottomLinkStyles","bottomLinkStylesTablet","login","register","discardErrors","type","prev","Styles","image","goBack","onSubmit","async","e","preventDefault","stopPropagation","validatedData","validate","abortEarly","LoginAction","replace","slice","length","err","errors","inner","forEach","item","path","_Fragment","Input","value","placeholder","name","setValue","arg","MaskedInput","mask","onAccept","updateValue","maskElement","isEmpty","additionalImage","disabled","Link","to","AuthModal","isInvalid","isPassword","showPassword","setShowPassword","divStyles","inputStyles","id","onChange","target","classNames","onClick","IMaskMixin","inputRef","autoComplete"],"sourceRoot":""}