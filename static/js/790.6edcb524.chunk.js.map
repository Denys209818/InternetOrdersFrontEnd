{"version":3,"file":"static/js/790.6edcb524.chunk.js","mappings":"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","sources":["components/MainPage/styles.ts","components/custom/OrderItem/OrderItem.tsx","components/custom/OrderItem/index.ts","components/custom/ButtonGroup/ButtonGroup.tsx","components/custom/ButtonGroup/index.ts","components/custom/TimeModal/TimeModal.tsx","components/custom/TimeModal/index.ts","components/OrderPage/validation/orderValidation.ts","components/custom/OrderModal/OrderModal.tsx","components/custom/OrderModal/index.ts","components/OrderPage/index.ts","components/OrderPage/OrderPage.tsx","components/custom/Input/Input.tsx","components/custom/Input/index.ts","components/custom/MaskedInput/MaskedInput.tsx","components/custom/MaskedInput/index.ts"],"sourcesContent":["export const sectionLargeStyle = \"min-[1440px]:px-10\";\nexport const sectionStyle = \"min-[1000px]:px-6\";\nexport const sectionTabletStyle = \"min-[744px]:px-[16px]\";\nexport const sectionPhoneStyle = \"min-[480px]:px-[16px]\";\nexport const sectionSmallphoneStyle = \"min-[375px]:px-[16px]\";\n\nexport const forkBlue = `\n        min-[1440px]:translate-x-negative-left-fork \n        min-[1000px]:translate-x-negative-left-fork-main\n        min-[375px]:translate-x-negative-left-fork-tablet\n        min-[1000px]:translate-y-negative-top-fork \n        min-[744px]:translate-y-negative-top-fork-tablet\n        min-[480px]:translate-y-negative-top-phonefork \n        min-[375px]:translate-y-negative-top-smallphonefork\n        min-[1440px]:w-[215px]\n        min-[744px]:w-[105px]\n        min-[1000px]:w-[139px]\n        min-[480px]:w-[100px]\n        min-[375px]:w-[74px]\n        `;\n\nexport const titleHead = `\n        min-[1440px]:text-headerHuge \n        min-[1000px]:text-headerHugeMain\n        min-[744px]:text-headerHugeTablet\n        min-[375px]:text-headerHugePhone\n    `;\n\nexport const minTitleHead = `\n        min-[1440px]:text-headerLess\n        min-[1000px]:text-headerLessMain\n        min-[375px]:text-headerLessTablet\n    `;\n\nexport const cardChoice = `\n        min-[1440px]:text-cardChoice\n        min-[1000px]:text-cardChoiceMain\n        min-[375px]:text-cardChoiceTablet\n    `;\n\nexport const betterMarkupLeft = `\n        min-[1440px]:col-start-1 min-[1440px]:col-end-7\n        min-[1000px]:col-start-1 min-[1000px]:col-end-8\n        min-[744px]:col-start-1 min-[744px]:col-end-10\n        min-[375px]:col-span-4\n    `;\n\nexport const betterMarkupRight = `\n        min-[1440px]:col-start-7 min-[1440px]:col-end-13\n        min-[744px]:col-start-1 min-[744px]:col-end-13\n        min-[375px]:col-span-4\n    `;\n\nexport const imgElse = `\n        min-[1440px]:size-[325px]\n        min-[1000px]:size-[300px]\n        min-[744px]:size-[215px]\n        min-[480px]:size-[200px]\n        min-[375px]:size-[163px]\n    `;\n\nexport const imgElseTitle = `\n        min-[1440px]:col-start-1 min-[1440px]:col-end-10\n        min-[744px]:col-start-1 min-[744px]:col-end-13\n        min-[375px]:col-span-4\n    `;\n\nexport const imgColLeft = `\n        min-[1440px]:col-start-1 min-[1440px]:col-end-2\n        min-[744px]:col-start-1 min-[744px]:col-end-3\n        min-[375px]:col-start-1 min-[375px]:col-end-2\n    `;\n\nexport const imgColRight = `\n        min-[1440px]:col-start-2 min-[1440px]:col-end-13\n        min-[744px]:col-start-3 min-[744px]:col-end-13\n        min-[375px]:col-start-2 min-[375px]:col-end-4\n    `;\n\nexport const hugeText = `\n        min-[1000px]:text-headerHuge \n        min-[375px]:text-headerHugeMain\n    `;","export type OrderItemType = {\n    title: string;\n    additionals: number;\n    count: number;\n    price: number;\n};\n\nexport const OrderItem: React.FC<OrderItemType> = ({ title, additionals, count, price }) => {\n    return (\n        <div className=\"flex flex-col gap-1\">\n            <h3 className='font-literata min-[744px]:text-orderListTitle text-orderListPhone italic text-[#1F2933]'>{title}</h3>\n\n            <div className=\"flex justify-between\">\n                <p className='block font-lato text-[#1F2933] min-[744px]:text-orderAuthDesc text-orderAuthDescPhone'>\n                    {additionals === 0 ? 'Без' : additionals} додатків\n                </p>\n\n                <div className='flex gap-1'>\n                    <span className='block text-[#1F2933] font-lato min-[744px]:text-orderAuthDesc text-orderAuthDescPhone'>{count} шт.</span>\n                    <span className='block text-[#1F2933] font-literata min-[744px]:text-orderListPrice text-orderListPricePhone italic'>{price} грн</span>\n                </div>\n            </div>\n        </div>\n    )\n}","import { OrderItem } from \"./OrderItem\";\n\nexport default OrderItem;","import { useState } from \"react\";\nimport Button from \"../Button\";\n\ninterface ButtonGroupType {\n    title: string;\n    btnGroupName: string;\n    additionalText?: string;\n    additionalImage?: '' | 'google' | 'instagram' | 'clock' | 'card';\n    disabled?: boolean;\n    hasModal?: React.FC;\n    onClickHandler?: (arg: string) => void;\n}\n\ninterface ButtonGroupListType {\n    buttons: ButtonGroupType[];\n}\n\nexport const ButtonGroup: React.FC<ButtonGroupListType> = ({ buttons }) => {\n    const [readyTime, setReadyTime] = useState('');\n\n    return (\n        <div className='flex flex-col pt-3 gap-3'>\n            {buttons.map(btn => (\n                <div key={btn.btnGroupName}>\n                    <Button\n                        title={btn.title}\n                        widthFull\n                        background='white'\n                        sizeBtn='huge'\n                        disabled={btn.disabled}\n                        additionalImage={btn.additionalImage}\n                        isSelected={readyTime === btn.btnGroupName}\n                        onClickHandler={\n                            () => {\n                                setReadyTime(btn.btnGroupName);\n                                \n                                if (btn.onClickHandler) {\n                                    btn.onClickHandler(btn.btnGroupName);\n                                }\n                            }\n                        }\n                    />\n\n                    {btn.additionalText && <p className='block font-lato pt-2 min-[744px]:text-orderAuthDesc text-orderAuthDescPhone text-[#1F2933]'>\n                        {btn.additionalText}\n                    </p>}\n\n                    {btn.hasModal && readyTime === btn.btnGroupName && <btn.hasModal />}\n                </div>\n            ))}\n        </div>\n    );\n}","import { ButtonGroup } from \"./ButtonGroup\";\n\nexport default ButtonGroup;","import { useEffect, useState } from \"react\";\nimport { useAppDispatch } from \"../../../redux/tools/hooks\";\nimport { changeDay, setExpectHour, setExpectMinute } from \"../../../actions/OrderActions\";\n\nexport const TimeModal: React.FC = () => {\n    const dispatch = useAppDispatch();\n    const [day, setDay] = useState<'today'|'tomorrow'|''>('');\n    const [hour, setHour] = useState('');\n    const [minute, setMinute] = useState('');\n\n    useEffect(() => {\n        if (day) {\n            dispatch(changeDay(day));\n        }\n    }, [day, dispatch]);\n\n    const todayMenuStyles = day === 'today' ? `\n        border-b\n    ` : '';\n\n    const tomorrowMenuStyles = day === 'tomorrow' ? `\n        border-b\n    ` : '';\n\n    return (\n    <div className=\"flex flex-col gap-4 bg-white p-4 border-b-2 border-x-2\">\n        <div className=\"flex gap-4\">\n            <p\n                className={`block p-2 font-lato text-btn hover:cursor-pointer ${todayMenuStyles}`}\n                onClick={() => setDay('today')}\n            >\n                Сьогодні\n            </p>\n\n            <p\n                className={`block p-2 font-lato text-btn hover:cursor-pointer ${tomorrowMenuStyles}`}\n                onClick={() => setDay('tomorrow')}\n            >\n                Завтра\n            </p>\n        </div>\n\n        <div className=\"flex flex-col gap-3\">\n            <p className=\"font-lato text-cook\">Вкажіть годину</p>\n\n            <div className=\"flex gap-1 justify-start items-center\">\n                <select\n                    value={hour ? hour : '-'}\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        setHour(value);\n\n                        dispatch(setExpectHour(value));\n                    }}\n                    className={`\n                        border\n                        border-[#E4E7EE]\n                        size-[44px]\n                        appearance-none\n                        text-center\n                        focus:outline-[#E4E7EE]\n                        hover:cursor-pointer\n                    `}\n                >\n                    <option value=\"-\">-</option>\n                    {Array.from({ length: 14 }, (_, i) => i + 8)\n                    .map(item => {\n                        const itemStr = item.toString().length === 1 ? '0' + item : item;\n\n                        return (<option value={item} key={item}>{itemStr}</option>)\n                    })}\n                </select>\n\n                <p>:</p>\n\n                <select\n                    value={minute ? minute : '-'}\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        setMinute(value);\n\n                        dispatch(setExpectMinute(value));\n                    }}\n                    className={`\n                        border\n                        border-[#E4E7EE]\n                        size-[44px]\n                        appearance-none\n                        text-center\n                        focus:outline-[#E4E7EE]\n                        hover:cursor-pointer\n                    `}\n                >\n                    <option value=\"-\">-</option>\n                    {Array.from({ length: 60 }, (_, i) => i)\n                    .map(item => {\n                        const itemStr = item.toString().length === 1 ? '0' + item : item;\n\n                        return (<option value={item} key={item}>{itemStr}</option>)\n                    })}\n                </select>\n            </div>\n        </div>\n    </div>\n    );\n}","import { TimeModal } from \"./TimeModal\";\n\nexport default TimeModal;","import { object, string } from 'yup';\n\nexport const orderSchema = object().shape({\n  firstName: string().required('Поле обов\\'язкове!'),\n  secondName: string().required('Поле обов\\'язкове!'),\n  phone: string().required('Поле обов\\'язкове!'),\n});","import { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport { ModalType } from \"../AuthModal/AuthModal\";\nimport { createPortal } from \"react-dom\";\nimport Button from \"../Button\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const OrderModal: React.ForwardRefExoticComponent<React.RefAttributes<unknown>> = forwardRef(\n    (props, ref) => {\n    const navigate = useNavigate();\n\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [btnText, setBtnText] = useState('');\n\n    const dialogRef = useRef<HTMLDialogElement>(null);\n\n    const modalStyles = \"absolute top-1/2 left-1/2 translate-y-[-50%] translate-x-[-50%]\" + \n    \" border border-2 bg-white p-10 backdrop:bg-black/40 w-max\";\n\n    useImperativeHandle(ref, () => ({\n        showModal: ({ title, description, leftBtnText: btnText }: ModalType) => {\n            if (dialogRef.current) {\n                setTitle(title);\n                setDescription(description || '');\n                setBtnText(btnText);\n\n                dialogRef.current.showModal();\n\n                document.body.style.overflow = 'hidden';\n                window.scrollTo(0, 0);\n            }\n        },\n\n        hideModal: () => {\n            if (dialogRef.current) {\n                dialogRef.current.close();\n            }\n        }\n    }));\n\n    const onClose = () => {\n        if (dialogRef.current) {\n            dialogRef.current.close();\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            document.body.style.overflow = '';\n        }\n    }, []);\n\n    return (createPortal(<dialog\n            ref={dialogRef}\n            className={modalStyles}\n        >\n            <div className=\"flex flex-col gap-6\">\n                <div className=\"block w-32\">\n                    <div className=\"relative block size-full pb-[77%]\">\n                        <div className=\"absolute size-full bg-[url('/src/images/Hendcheese.svg')] bg-cover\"></div>\n                    </div>\n                </div>\n\n                <div>\n                    <h1 className=\"block uppercase font-oswald font-medium tracking-tighter text-3xl\">{title}</h1>\n                    {description && (\n                        <p className=\"block pt-2 text-[#525A63] font-semibold font-base font-lato\">{description}</p>\n                    )}\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-x-3 min-[375px]:gap-y-3\">\n                    <Button\n                        sizeBtn=\"huge\"\n                        title={btnText}\n                        background=\"black\"\n                        onClickHandler={() => {\n                            onClose();\n                            \n                            navigate('/menu');\n                        }}\n                    />\n                </div>\n            </div>\n        </dialog>,\n        document.getElementsByTagName('body')[0]\n    ));\n});","import { OrderModal } from \"./OrderModal\";\n\nexport default OrderModal;","import { OrderPage } from \"./OrderPage\";\n\nexport default OrderPage;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport Button from '../custom/Button';\nimport * as Styles from '../MainPage/styles';\nimport OrderItem from '../custom/OrderItem';\nimport { OrderItemType } from '../custom/OrderItem/OrderItem';\nimport { getRandomInt } from '../../tools/randomFunc';\nimport { useAppDispatch, useAppSelector } from '../../redux/tools/hooks';\nimport ButtonGroup from '../custom/ButtonGroup';\nimport TimeModal from '../custom/TimeModal';\nimport { orderSchema } from \"./validation/orderValidation\";\nimport Input from \"../custom/Input\";\nimport MaskedInput from \"../custom/MaskedInput\";\nimport { changeExpectationTime, clearOrder, setPaymentType } from \"../../actions/OrderActions\";\nimport OrderModal from \"../custom/OrderModal\";\nimport { ModalRefType } from \"../custom/AuthModal/AuthModal\";\n\nexport const OrderPage = () => {\n    const modalRef = useRef<ModalRefType>();\n    const maskRef = useRef(null);\n    const dispatch = useAppDispatch();\n\n    const [firstName, setFirstName] = useState('');\n    const [secondName, setSecondName] = useState('');\n    const [phone, setPhone] = useState('');\n    const [authErrors, setAuthErrors] = useState<{ [key: string]: string[] }>({});\n\n    const discardErrors = (type: string) => {\n        setAuthErrors(prev => ({\n            ...prev,\n            [type]: []\n        }));\n    }\n\n    const formOrder = async () => {\n        try {\n            const validatedData = await orderSchema.validate({\n                firstName,\n                secondName,\n                phone\n            }, { abortEarly: false });\n        } catch (err: any) {\n            const errors: { [key: string]: string[] } = {};\n\n            err.inner.forEach((item: Yup.ValidationError) => {\n                if (item.path) {\n                    errors[item.path] = item.errors;\n                }\n            });\n\n            setAuthErrors(errors);\n        }\n    }\n\n    const cartItems = useAppSelector(state => state.cart);\n    const order = useAppSelector(state => state.order);\n\n    const getValidExpectationTime = useCallback((timeType: string) => {\n        if (timeType === 'clear') {\n            return order.day && order.expectMinute && order.expectHour;\n        }\n\n        return true;\n    }, [order]);\n\n    const orderItems: OrderItemType[] = cartItems.map(item => ({\n        title: item.title,\n        price: item.price,\n        count: item.count,\n        additionals: item.additionalCount\n    }));\n\n    const additionalItems: OrderItemType[] = order.additionalsList.map(item => ({\n        title: item.title,\n        price: item.price,\n        count: 1,\n        additionals: 0\n    }));\n\n    const totalPrice = orderItems.reduce((prev, curr) => prev + curr.count * curr.price, 0)\n        + additionalItems.reduce((prev, curr) => prev + curr.price, 0);\n\n    const isValid = useMemo(() => {\n        return (firstName &&\n        secondName &&\n        phone.length === 17 &&\n        totalPrice > 0 && \n        order.paymentType && \n        order.expectationTimeType &&\n        getValidExpectationTime(order.expectationTimeType));\n    }, [firstName, secondName, phone.length, totalPrice, order.paymentType, order.expectationTimeType, getValidExpectationTime]);    \n\n    const sectionStyles = `\n    ${Styles.sectionLargeStyle}\n    ${Styles.sectionPhoneStyle}\n    ${Styles.sectionSmallphoneStyle}\n    ${Styles.sectionStyle}\n    ${Styles.sectionTabletStyle}\n    `;\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearOrder());\n        }\n    }, [dispatch]);\n\n    return (<main className=\"relative pt-[90px] bg-[#FFE9DE]\">\n        <OrderModal ref={modalRef} />\n\n        <section className={`max-w-[1440px] m-auto ${sectionStyles}`}>\n            <Button\n                image=\"back\"\n                background=\"transparent\"\n                onClickHandler={() => navigate(-1)}\n            />\n        </section>\n\n        <section className={`max-w-[1440px] pt-3 m-auto ${sectionStyles}`}>\n            <h1 className={`\n                    font-oswald\n                    min-[744px]:text-orderTitle\n                    text-orderTitlePhone\n                    uppercase\n                    `}>\n                Оформлення замовлення\n            </h1>\n        </section>\n\n        <section className={`max-w-[1440px] min-[1000px]:pt-[60px] min-[7440px]:pt-[40px] pt-[24px] pb-[80px] m-auto ${sectionStyles}`}>\n            <div className='grid grid-cols-12 gap-x-5 gap-y-10'>\n                <div className='flex flex-col gap-10 min-[1000px]:col-span-5 col-span-12'>\n                    <div className=\"block p-6 border-2\">\n                        <h2 className='font-lato text-orderAuthLinePhone min-[744px]:text-orderAuthTitle'>Зареєструйтесь або увійдіть</h2>\n                        <p className='block pt-2 font-lato text-[#525A63] min-[744px]:text-orderAuthDesc text-orderAuthDescPhone'>\n                            Щоб отримати знижки, збереження історії замовлень, швидкий доступ до профілю та відстеження замовлень\n                        </p>\n\n                        <div className=\"block pt-6\">\n                            <Button\n                                widthFull\n                                background=\"black\"\n                                sizeBtn='huge'\n                                title='Увійти'\n                                onClickHandler={() => navigate('/auth/login')}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-12 gap-y-10\">\n                        <div className='block min-[744px]:col-span-7 col-span-12 min-[1000px]:col-span-12'>\n                            <p className='font-lato min-[744px]:text-orderAuthLine text-orderAuthLinePhone'>\n                                Продовжити без реєстрації\n                            </p>\n\n                            <h1 className='block pt-4 uppercase font-oswald min-[744px]:text-orderAuthFormTitle text-orderAuthFormTitlePhone'>\n                                Хто ви?\n                            </h1>\n\n                            <p className='block font-lato text-[#525A63] min-[744px]:text-orderAuthDesc text-orderAuthDescPhone'>\n                                Вкажіть час, на який бажаєте отримати замовлення\n                            </p>\n\n                            <div className='flex flex-col gap-3 pt-3'>\n                                <Input\n                                    value={firstName}\n                                    placeholder=\"Ім'я\"\n                                    type=\"text\"\n                                    name=\"firstName\"\n                                    setValue={(arg) => { setFirstName(arg); discardErrors('firstName'); }}\n                                    errors={authErrors.firstName || []}\n                                />\n\n                                <Input\n                                    value={secondName}\n                                    placeholder=\"Прізвище\"\n                                    type=\"text\"\n                                    name=\"secondName\"\n                                    setValue={(arg) => { setSecondName(arg); discardErrors('secondName'); }}\n                                    errors={authErrors.secondName || []}\n                                />\n\n                                <MaskedInput\n                                    ref={maskRef}\n                                    placeholder=\"Телефон\"\n                                    type=\"text\"\n                                    name=\"phone\"\n                                    mask={\"+38 000 000 00 00\"}\n                                    onAccept={(value: string, mask: any) => {\n                                        setPhone(value);\n                                        discardErrors('phone');\n\n                                        mask.updateValue();\n                                    }}\n                                    onClickHandler={() => {\n                                        if (maskRef.current && !phone) {\n                                            const maskElement = maskRef.current as any;\n                                            maskElement.maskRef.value = '+38 ';\n                                            maskElement.maskRef.updateValue();\n                                        }\n                                    }}\n                                    isEmpty={phone.length === 0}\n                                    errors={authErrors.phone || []}\n                                />\n                            </div>\n                        </div>\n\n                        <div className='block min-[744px]:col-span-7 col-span-12 min-[1000px]:col-span-12'>\n                            <h1 className='block pt-4 uppercase font-oswald min-[744px]:text-orderAuthFormTitle text-orderAuthFormTitlePhone'>\n                                На коли треба?\n                            </h1>\n\n                            <p className='block font-lato text-[#525A63] min-[744px]:text-orderAuthDesc text-orderAuthDescPhone'>\n                                Вкажіть час, на який бажаєте отримати замовлення\n                            </p>\n\n                            <ButtonGroup\n                                buttons={[\n                                    {\n                                        title: 'По готовності',\n                                        btnGroupName: 'free',\n                                        additionalText: 'Приблизно через 20-30 хвилин',\n                                        onClickHandler(arg: string) {\n                                            dispatch(changeExpectationTime(arg))\n                                        },\n                                    },\n                                    {\n                                        title: 'На конкретний час',\n                                        btnGroupName: 'clear',\n                                        additionalImage: 'clock',\n                                        hasModal: TimeModal,\n                                        onClickHandler(arg: string) {\n                                            dispatch(changeExpectationTime(arg))\n                                        },\n                                    },\n                                ]}\n                            />\n                        </div>\n\n                        <div className=\"block min-[744px]:col-span-7 col-span-12 min-[1000px]:col-span-12\">\n                            <h1 className='block pt-4 uppercase font-oswald min-[744px]:text-orderAuthFormTitle text-orderAuthFormTitlePhone'>\n                                Що по оплаті?\n                            </h1>\n\n                            <p className='block font-lato text-[#525A63] min-[744px]:text-orderAuthDesc text-orderAuthDescPhone'>\n                                Як би ви хотіли оплатити замовлення?\n                            </p>\n\n                            <div className='flex flex-col pt-3 gap-3'>\n                                <ButtonGroup\n                                    buttons={[\n                                        {\n                                            title: 'При отриманні',\n                                            btnGroupName: 'giving',\n                                            onClickHandler(arg) {\n                                                dispatch(setPaymentType(arg))\n                                            }\n                                        },\n                                        {\n                                            title: 'Передоплата онлайн',\n                                            btnGroupName: 'online',\n                                            disabled: true,\n                                            additionalImage: 'card',\n                                            additionalText: 'Вибачте, але оплата онлайн поки що недоступна. Ми працюємо над цим. Дякуємо за розуміння!'\n                                        },\n                                    ]}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='min-[1000px]:col-span-7 col-span-12'>\n                    <div className=\"block border-2\">\n                        <div className=\"block p-3 bg-[#9CC2FF] border-b-2\">\n                            <h1 className='block uppercase font-oswald min-[744px]:text-orderAuthFormTitle text-orderAuthFormTitlePhone'>\n                                Замовлення\n                            </h1>\n                        </div>\n\n                        <div className=\"block p-3 bg-white\">\n                            <div className=\"flex flex-col pb-3 gap-[45px]\">\n                                {orderItems.map(el => (\n                                    <OrderItem\n                                        key={getRandomInt(1, 1000) + el.title}\n                                        {...el}\n                                    />\n                                ))}\n\n                                {additionalItems.map(el => (\n                                    <OrderItem\n                                        key={getRandomInt(1, 1000) + el.title}\n                                        {...el}\n                                    />\n                                ))}\n\n                                <Button\n                                    sizeBtn='huge'\n                                    widthFull\n                                    disabled={!isValid}\n                                    title='Підтвердити'\n                                    background='black'\n                                    onClickHandler={() => {\n                                        if (modalRef.current) {\n                                            modalRef.current.showModal({\n                                                title: `прийнято!\\nЗамовлення #1024`,\n                                                leftBtnText: 'Повернутись до меню',\n                                                description: 'Готуйтеся до смачного перекусу о [вказаний час]',\n                                                rightBtnText: '',\n                                            });\n                                        }\n                                    }}\n                                />\n                            </div>\n\n                            <div className='flex justify-end items-center gap-2 border-t border-[#CBD2D9]'>\n                                <p className='block text-[#1F2933] min-[744px]:text-orderAuthDesc text-orderAuthDescPhone font-lato'>До сплати:</p>\n                                <p className='block text-[#1F2933] min-[744px]:text-orderListTitle text-orderListTitlePhone font-literata italic'>{totalPrice} грн</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </main>);\n}","import classNames from 'classnames';\nimport { useState } from 'react';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    value: string;\n    setValue: (arg: string) => void;\n    errors: string[];\n};\n\nexport const Input: React.FC<InputType> = ({ type, placeholder, name, value, setValue, errors }) => {\n    const isInvalid = errors.length > 0;\n\n    const isPassword = type === 'password';\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const isEmpty = value.length === 0;\n\n    const divStyles = !isEmpty ? 'text-inputPlaceholder top-2 left-6 translate-y-0' : `\n            top-[50%]\n            translate-y-[-50%]\n            left-6\n            group-focus-within:text-inputPlaceholder\n            group-focus-within:top-2\n            group-focus-within:translate-y-0\n        `;\n    const inputStyles = !isEmpty ? 'pb-2 pt-6' : 'group-focus-within:pb-2 group-focus-within:pt-6';\n\n    return (\n    <div className='relative'>\n        <div className='relative group'>\n            <p className={`\n                absolute\n                block\n                font-lato\n                text-input\n                text-[#525A63]\n                pointer-events-none\n                duration-75\n                ${divStyles}\n            `}>\n                {placeholder}\n            </p>\n\n            <input \n                type={isPassword && showPassword ? 'text' : type} \n                name={name} \n                id={name} \n                value={value} \n                onChange={e => setValue(e.target.value)}\n                className={classNames(\n                    \"block \" +\n                    \"size-full \" + \n                    \"px-6 \" +\n                    `py-4 ${inputStyles} ` +\n                    \"bg-white \" +\n                    \"hover:bg-[#F5F7FA] hover:cursor-pointer \" +\n                    \"font-lato \" +\n                    \"text-input \" +\n                    \"text-[#525A63] \" +\n                    \"outline-none \" +\n                    \"duration-75 \" +\n                    \"autofill:bg-yellow-200 autofill:text-[#525A63] \",\n                    \"focus:border-2 focus:border-black \", \n                    { 'border-2 border-[#E4E7EE]' : !isInvalid },\n                    { 'border-2 border-[#B20508]': isInvalid }\n                    )\n                }\n            />\n        </div>\n\n        {isPassword && \n        <div \n            className='absolute left-[100%] top-0 translate-x-negative-x-eye translate-y-positive-y-eye hover:cursor-pointer'\n            onClick={() => setShowPassword(prev => !prev)}\n\n        >\n            <div className=\"relative block size-6\">\n                <div className={`absolute block size-full bg-[url('/src/images/Eye.svg')] bg-cover`}></div>\n            </div>\n        </div>}\n        \n        {isInvalid && <p className=\"font-medium font-lato text-sm pl-4\">{errors[0]}</p>}\n    </div>)\n}","import { Input } from \"./Input\";\n\nexport default Input;","import classNames from 'classnames';\nimport { LegacyRef } from 'react';\nimport { IMaskMixin } from 'react-imask';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    isEmpty: boolean;\n    errors: string[];\n    onClickHandler: () => void;\n};\n\nexport const MaskedInput = IMaskMixin(({ inputRef, ...props }) => {\n    const { type, placeholder, isEmpty, name, errors, onClickHandler } = props as InputType;\n    const isInvalid = errors.length > 0;\n\n    const divStyles = !isEmpty ? 'text-inputPlaceholder top-2 left-6 translate-y-0' : `\n            top-[50%]\n            translate-y-[-50%]\n            left-6\n            group-focus-within:text-inputPlaceholder\n            group-focus-within:top-2\n            group-focus-within:translate-y-0\n        `;\n    const inputStyles = !isEmpty ? 'pb-2 pt-6' : 'py-4 group-focus-within:pb-2 group-focus-within:pt-6';\n\n    return (\n        <div className=\"relative\">\n            <div className='relative group' onClick={onClickHandler}>\n                <p className={`\n                    absolute\n                    block\n                    font-lato\n                    text-input\n                    text-[#525A63]\n                    pointer-events-none\n                    duration-75\n                    ${divStyles}\n                `}>\n                    {placeholder}\n                </p>\n\n                <input\n                    ref={inputRef as LegacyRef<HTMLInputElement>}\n                    type={type}\n                    autoComplete='off'\n                    name={name}\n                    id={name}\n                    className={classNames(\n                        \"block \" +\n                        \"size-full \" +\n                        \"px-6 \" +\n                        `${inputStyles} ` +\n                        \"bg-white \" +\n                        \"font-lato \" +\n                        \"text-input \" +\n                        \"text-[#525A63] \" +\n                        \"outline-none \" +\n                        \"duration-75 \" +\n                        \"focus:border-2 focus:border-black \",\n                        { 'border-2 border-[#E4E7EE]': !isInvalid },\n                        { 'border-2 border-[#B20508]': isInvalid }\n                    )\n                    }\n                />\n            </div>\n        </div>\n    )\n})","import { MaskedInput } from \"./MaskedInput\";\n\nexport default MaskedInput;"],"names":["sectionLargeStyle","sectionStyle","sectionTabletStyle","sectionPhoneStyle","sectionSmallphoneStyle","forkBlue","titleHead","minTitleHead","cardChoice","betterMarkupLeft","betterMarkupRight","imgElse","imgElseTitle","imgColLeft","imgColRight","hugeText","_ref","title","additionals","count","price","_jsxs","className","children","_jsx","buttons","readyTime","setReadyTime","useState","map","btn","Button","widthFull","background","sizeBtn","disabled","additionalImage","isSelected","btnGroupName","onClickHandler","additionalText","hasModal","TimeModal","dispatch","useAppDispatch","day","setDay","hour","setHour","minute","setMinute","useEffect","changeDay","todayMenuStyles","tomorrowMenuStyles","onClick","value","onChange","e","target","setExpectHour","Array","from","length","_","i","item","itemStr","toString","setExpectMinute","object","shape","firstName","string","required","secondName","phone","forwardRef","props","ref","navigate","useNavigate","setTitle","description","setDescription","btnText","setBtnText","dialogRef","useRef","useImperativeHandle","showModal","leftBtnText","current","document","body","style","overflow","window","scrollTo","hideModal","close","createPortal","getElementsByTagName","OrderPage","modalRef","maskRef","setFirstName","setSecondName","setPhone","authErrors","setAuthErrors","discardErrors","type","prev","cartItems","useAppSelector","state","cart","order","getValidExpectationTime","useCallback","timeType","expectMinute","expectHour","orderItems","additionalCount","additionalItems","additionalsList","totalPrice","reduce","curr","isValid","useMemo","paymentType","expectationTimeType","sectionStyles","Styles","clearOrder","OrderModal","image","Input","placeholder","name","setValue","arg","errors","MaskedInput","mask","onAccept","updateValue","maskElement","isEmpty","ButtonGroup","changeExpectationTime","setPaymentType","el","OrderItem","getRandomInt","rightBtnText","isInvalid","isPassword","showPassword","setShowPassword","divStyles","inputStyles","id","classNames","IMaskMixin","inputRef","autoComplete"],"sourceRoot":""}