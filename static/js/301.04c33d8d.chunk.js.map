{"version":3,"file":"static/js/301.04c33d8d.chunk.js","mappings":"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","sources":["components/AuthPage/validation/loginValidation.ts","redux/tools/hooks.ts","components/AuthPage/validation/registerValidation.ts","components/custom/Button/Button.tsx","components/custom/Button/index.ts","components/custom/Input/Input.tsx","components/custom/Input/index.ts","components/custom/AuthModal/AuthModal.tsx","components/custom/AuthModal/index.ts","components/custom/MaskedInput/MaskedInput.tsx","components/custom/MaskedInput/index.ts","components/AuthPage/index.ts","components/AuthPage/AuthPage.tsx"],"sourcesContent":["import { object, string } from 'yup';\n\nexport const loginSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!'),\n  password: string().required('Поле обов\\'язкове!').min(6, 'Пароль має містити 6 символів'),\n});","import { TypedUseSelectorHook } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../store\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch: () => AppDispatch = useDispatch;","import { object, string } from 'yup';\n\nexport const registerSchema = object().shape({\n  email: string().email('Не коректна E-mail').required('Поле обов\\'язкове!'),\n  firstName: string().required('Поле обов\\'язкове!'),\n  secondName: string().required('Поле обов\\'язкове!'),\n  password: string().required().min(6, 'Пароль має містити 6 символів'),\n});","type ButtonType = {\n    title?: string;\n    background?: 'transparent' | 'white' | 'black';\n    image?: string;\n    sizeBtn?: 'huge' | 'small';\n    additionalImage?: 'google' | '';\n    type?: \"button\" | \"submit\" | \"reset\" | undefined;\n    onClickHandler?: () => void;\n    disabled?: boolean;\n}\n\nexport const Button:React.FC<ButtonType> = ({ \n    title = '', \n    background = 'transparent', \n    image = '', \n    sizeBtn = 'small',\n    additionalImage = '',\n    type = 'button',\n    disabled = false,\n    onClickHandler,\n}) => {\n\n    const btnStyles = {\n        transparent: {\n            background: 'transparent',\n            color: 'black'\n        },\n        black: {\n            background: 'bg-black',\n            color: 'text-white',\n        },\n        white: {\n            background: 'bg-white',\n            color: 'text-black',\n        },\n        huge: 'px-6 py-4 w-full',\n        small: \"size-10 hover:border-white\",\n        google: {\n            additionalImage: \"bg-[url('/src/images/EnterIcon.svg')]\",\n        }\n    };\n\n    const btnStyle = `relative block border disabled:bg-[#9AA5B1] disabled:border-0 min-[744px]:col-span-1` + \n    ` hover:bg-[#BBEE85] outline-black min-[375px]:col-span-2 transition duration-300 ease-in-out` + \n    `border-black ${btnStyles[background].background} ${btnStyles[sizeBtn]} group`;\n\n    return (<button\n        type={type}\n        className={btnStyle}\n        onClick={onClickHandler}\n        disabled={disabled}\n        >\n        {title && (\n            <div className=\"flex justify-center items-center gap-2\">\n                <p className={`block text-btn text-nowrap ${btnStyles[background].color}`}>\n                    {title}\n                </p>\n\n                {additionalImage && <div className=\"relative block size-6\">\n                    <div className={`absolute block size-full ${btnStyles[additionalImage].additionalImage} bg-cover`}></div>\n                </div>}\n            </div>\n        )}\n\n        {image && (<>\n            <div className={`\n                absolute \n                top-[50%]\n                left-[50%]\n                transform \n                -translate-x-1/2 \n                -translate-y-1/2\n                block \n                size-6 \n                bg-[url('/src/images/Back.svg')] \n                bg-cover\n                transition duration-300 ease-in-out\n                opacity-100\n                group-hover:opacity-0\n                `}>\n            </div>\n\n            <div className={`\n                absolute \n                top-[50%]\n                left-[50%]\n                transform \n                -translate-x-1/2 \n                -translate-y-1/2\n                block \n                size-6 \n                bg-[url('/src/images/Back-hover.svg')] \n                bg-cover\n                transition duration-300 ease-in-out\n                opacity-0\n                group-hover:opacity-100\n                `}>\n            </div>\n        </>)}\n    </button>);\n}","import { Button } from \"./Button\";\n\nexport default Button;","import classNames from 'classnames';\nimport { useState } from 'react';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    value: string;\n    setValue: (arg: string) => void;\n    errors: string[];\n};\n\nexport const Input: React.FC<InputType> = ({ type, placeholder, name, value, setValue, errors }) => {\n    const isInvalid = errors.length > 0;\n\n    const isPassword = type === 'password';\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n    <div className='relative'>\n        <input \n            type={isPassword && showPassword ? 'text' : type} \n            placeholder={placeholder} \n            name={name} \n            id={name} \n            value={value} \n            onChange={e => setValue(e.target.value)}\n            className={classNames(\n                \"block \" +\n                \"size-full \" + \n                \"px-6 \" +\n                \"py-4 \" +\n                \"bg-white \" +\n                \"font-lato \" +\n                \"text-input \" +\n                \"text-[#525A63] \" +\n                \"outline-none \" +\n                \"focus:border-2 focus:border-black \", \n                { 'border-2 border-[#E4E7EE]' : !isInvalid },\n                { 'border-2 border-[#B20508]': isInvalid }\n                )\n            }\n        />\n\n        {isPassword && \n        <div \n            className='absolute left-[100%] top-0 translate-x-negative-x-eye translate-y-positive-y-eye hover:cursor-pointer'\n            onClick={() => setShowPassword(prev => !prev)}\n\n        >\n            <div className=\"relative block size-6\">\n                <div className={`absolute block size-full bg-[url('/src/images/Eye.svg')] bg-cover`}></div>\n            </div>\n        </div>}\n        \n        {isInvalid && <p className=\"font-medium font-lato text-sm pl-4\">{errors[0]}</p>}\n    </div>)\n}","import { Input } from \"./Input\";\n\nexport default Input;","import { forwardRef, useImperativeHandle, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport Button from \"../Button\";\n\ntype ModalType = {\n    title: string;\n    description?: string;\n    leftBtnText: string;\n    rightBtnText: string;\n}\n\nexport type ModalRefType = {\n    showModal: (props: ModalType) => void;\n    hideModal: () => void;\n};\n\nexport const AuthModal: React.ForwardRefExoticComponent<React.RefAttributes<unknown>> = forwardRef(\n    (props, ref) => {\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [leftBtnText, setLeftBtnText] = useState('');\n    const [rightBtnText, setRightBtnText] = useState('');\n\n    const dialogRef = useRef<HTMLDialogElement>(null);\n\n    const modalStyles = \"absolute top-1/2 left-1/2 translate-y-[-50%] translate-x-[-50%]\" + \n    \" border border-2 bg-white p-10 backdrop:bg-black/40 w-max\";\n\n    useImperativeHandle(ref, () => ({\n        showModal: ({ title, description, leftBtnText, rightBtnText }: ModalType) => {\n            if (dialogRef.current) {\n                setTitle(title);\n                setDescription(description || '');\n                setLeftBtnText(leftBtnText);\n                setRightBtnText(rightBtnText);\n\n                dialogRef.current.showModal();\n            }\n        },\n\n        hideModal: () => {\n            if (dialogRef.current) {\n                dialogRef.current.close();\n            }\n        }\n    }));\n\n    const onClose = () => {\n        if (dialogRef.current) {\n            dialogRef.current.close();\n        }\n    }\n\n    return (createPortal(<dialog\n            ref={dialogRef}\n            className={modalStyles}\n        >\n            <div className=\"flex flex-col gap-6\">\n                <div className=\"block w-32\">\n                    <div className=\"relative block size-full pb-[77%]\">\n                        <div className=\"absolute size-full bg-[url('/src/images/Hendcheese.svg')] bg-cover\"></div>\n                    </div>\n                </div>\n\n                <div>\n                    <h1 className=\"block uppercase font-oswald font-medium tracking-tighter text-3xl\">{title}</h1>\n                    {description && (\n                        <p className=\"block pt-2 text-[#525A63] font-semibold font-base font-lato\">{description}</p>\n                    )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-x-3 min-[375px]:gap-y-3\">\n                    <Button\n                        sizeBtn=\"huge\"\n                        title={leftBtnText}\n                        background=\"white\"\n                        onClickHandler={onClose}\n                    />\n\n                    <Button\n                        sizeBtn=\"huge\"\n                        title={rightBtnText}\n                        background=\"black\"\n                        onClickHandler={onClose}\n                    />\n                </div>\n            </div>\n        </dialog>,\n        document.getElementsByTagName('body')[0]\n    ));\n});","import { AuthModal } from \"./AuthModal\";\n\nexport default AuthModal;","import classNames from 'classnames';\nimport { LegacyRef } from 'react';\nimport { IMaskMixin } from 'react-imask';\n\ntype InputType = {\n    type: string;\n    placeholder: string;\n    name: string;\n    value: string;\n    setValue: (arg: string) => void;\n    errors: string[];\n};\n\nexport const MaskedInput = IMaskMixin(({ inputRef, ...props }) => {\n    const { type, placeholder, name, value, setValue, errors } = props as InputType;\n\n    const isInvalid = errors.length > 0;\n\n    return (\n        <input\n            ref={inputRef as LegacyRef<HTMLInputElement>}\n            type={type} \n            placeholder={placeholder}\n            autoComplete='off'\n            name={name} \n            id={name} \n            value={value} \n            onChange={e => setValue(e.target.value)}\n            className={classNames(\n                \"block \" +\n                \"size-full \" + \n                \"px-6 \" +\n                \"py-4 \" +\n                \"bg-white \" +\n                \"font-lato \" +\n                \"text-input \" +\n                \"text-[#525A63] \" +\n                \"outline-none \" +\n                \"focus:border-2 focus:border-black \", \n                { 'border-2 border-[#E4E7EE]' : !isInvalid },\n                { 'border-2 border-[#B20508]': isInvalid }\n                )\n            }\n        />\n    )\n})","import { MaskedInput } from \"./MaskedInput\";\n\nexport default MaskedInput;","import AuthPage from \"./AuthPage\";\n\nexport default AuthPage;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useRef, useState } from \"react\";\nimport { loginSchema } from \"./validation/loginValidation\";\nimport { LoginAction, RegisterAction } from \"../../actions/AuthActions\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/tools/hooks\";\nimport { Link, URLSearchParamsInit, useNavigate, useSearchParams } from \"react-router-dom\";\nimport { registerSchema } from \"./validation/registerValidation\";\nimport Button from \"../custom/Button\";\nimport Input from \"../custom/Input\";\nimport AuthModal from \"../custom/AuthModal\";\nimport { ModalRefType } from \"../custom/AuthModal/AuthModal\";\nimport { createPortal } from \"react-dom\";\nimport MaskedInput from \"../custom/MaskedInput\";\nimport * as Yup from 'yup';\nimport * as Styles from './styles';\n\nexport type ModeType = 'login' | 'register' | 'phone';\n\nconst AuthPage: React.FC = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [authErrors, setAuthErrors] = useState<{[key: string]: string[]}>({});\n    const [firstName, setFirstName] = useState('');\n    const [secondName, setSecondName] = useState('');\n    const [phone, setPhone] = useState('');\n\n    const modalRef = useRef<ModalRefType>();\n\n    const navigate = useNavigate();\n    \n    const auth = useAppSelector(state => state.auth);\n    const dispatch = useAppDispatch();\n\n    const [search, setSearchParams] = useSearchParams();\n    \n    const mode: ModeType = search.get('mode') as ModeType;\n    const bottomLinkStyles = 'block font-medium font-lato text-xl';\n    const bottomLinkStylesTablet = 'min-[375px]:block min-[375px]:font-lato';\n    const link = {\n        login: 'register',\n        register: 'login',\n    }\n\n    const title = {\n        login: {\n            title: 'Увійдіть в аккаунт',\n            description: 'Щоб отримати знижки, збереження історії замовлень, швидкий доступ до профілю та відстеження замовлень',\n        },\n        register: {\n            title: 'Зареєструйтесь',\n            description: 'Щоб отримати знижки, збереження історії замовлень, швидкий доступ до профілю та відстеження замовлень',\n        },\n        phone: {\n            title: 'додайте номер телефону',\n            description: 'Щоб завершити реєстрацію',\n        }\n    }\n\n    const authHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        try {\n            if (mode !== 'login' && mode !== 'register' && mode !== 'phone')\n                return;\n\n            if (mode === 'login') {\n                const validatedData = await loginSchema.validate({\n                    email,\n                    password\n                }, { abortEarly: false });\n                \n                if (modalRef.current) {\n                    modalRef.current.showModal({\n                        title: \"З поверненням!\",\n                        leftBtnText: \"Переглянути профіль\", \n                        rightBtnText: \"Перейти до замовлення\"\n                    });\n                }\n    \n                dispatch(LoginAction(validatedData));\n            } \n            else if (mode === 'register') {\n                const validatedData = await registerSchema.validate({\n                    email,\n                    password,\n                    firstName,\n                    secondName\n                }, { abortEarly: false });\n\n                const urlSearch = new URLSearchParams(search.toString());\n\n                urlSearch.set('mode', 'phone')\n\n                setSearchParams(urlSearch.toString());\n\n                // dispatch(RegisterAction(validatedData));\n            } \n            else if (mode === 'phone') {\n                const validatedData = await loginSchema.validate({\n                    firstName,\n                    secondName,\n                    email,\n                    password\n                });\n\n                const unmaskedValue = phone.replace(/\\D/g, '').slice(2);\n                \n                if (unmaskedValue.length === 10 && modalRef.current) {\n                    modalRef.current.showModal({\n                        title: \"Успіх! Картопля фрі в доступі\",\n                        description: \"Ви успішно зареєструвались! Тепер ви можете користуватися усіма перевагами вашого акаунта.\",\n                        leftBtnText: \"Переглянути профіль\", \n                        rightBtnText: \"Перейти до замовлення\"\n                    });\n                }\n            }\n\n        } catch(err: any) {\n            const errors: {[key: string]: string[]} = {};\n\n            err.inner.forEach((item: Yup.ValidationError) => {\n                if (item.path) {\n                    errors[item.path] = item.errors;\n                }\n            });\n\n            setAuthErrors(errors);\n        }\n    }\n\n    const discardErrors = (type: string) => {\n        setAuthErrors(prev => ({\n            ...prev,\n            [type]: []\n        }));\n    }\n\n    const goBack = () => {\n        navigate('..');\n    }\n\n    return (<main className={\n        `${Styles.largeMainStyle} \n        ${Styles.mainStyle} \n        ${Styles.phoneMainStyle} \n        ${Styles.smallphoneMainStyle} \n        ${Styles.tabletMainStyle}`}\n        >\n        <section>\n            <Button image=\"Back.svg\" background=\"transparent\" onClickHandler={goBack} />\n        </section>\n\n        <section>\n            <div className={`\n                ${Styles.gridStyle} \n                ${Styles.largeGridStyle} \n                ${Styles.phoneGridStyle} \n                ${Styles.tabletGridStyle} \n                ${Styles.smallphoneGridStyle}`}\n            >\n                <div className={`\n                    ${Styles.gridContainerStyle}\n                    ${Styles.largeGridContainerStyle}\n                    ${Styles.smallphoneGridContainerStyle}\n                    ${Styles.phoneGridContainerStyle} \n                    ${Styles.tabletGridContainerStyle}`}\n                    >\n                    <h1 className={`\n                        ${Styles.titleStyle}\n                        ${Styles.largeTitleStyle}\n                        ${Styles.tabletTitleStyle}\n                        ${Styles.phoneTitleStyle}\n                        ${Styles.smallphoneTitleStyle}\n                        `}>\n                        {title[mode].title}\n                    </h1>\n\n                    <p className={`\n                        ${Styles.descStyle}\n                        ${Styles.largeDescStyle}\n                        ${Styles.tabletDescStyle}\n                        ${Styles.phoneDescStyle}\n                        ${Styles.smallphoneDescStyle}\n                        `}>\n                        {title[mode].description}\n                    </p>\n\n                    <form onSubmit={authHandler}>\n                        <div className={`\n                            ${Styles.formStyle}\n                            ${Styles.largeFormStyle}\n                            ${Styles.tabletFormStyle}\n                            ${Styles.phoneFormStyle}\n                            ${Styles.smallphoneFormStyle}\n                            `}>\n                            {mode === 'register' && (<>\n                            <Input\n                                value={firstName}\n                                placeholder=\"Ім'я\"\n                                type=\"text\"\n                                name=\"firstName\"\n                                setValue={(arg) => { setFirstName(arg); discardErrors('firstName'); }}\n                                errors={authErrors.firstName || []}\n                            />\n\n                            <Input\n                                value={secondName}\n                                placeholder=\"Прізвище\"\n                                type=\"text\"\n                                name=\"secondName\"\n                                setValue={(arg) => { setSecondName(arg); discardErrors('secondName'); }}\n                                errors={authErrors.secondName || []}\n                            /></>)}\n\n                            {mode !== 'phone' && <>\n                            <Input\n                                value={email}\n                                placeholder=\"Електронна пошта\"\n                                type=\"text\"\n                                name=\"email\"\n                                setValue={(arg) => { setEmail(arg); discardErrors('email'); }}\n                                errors={authErrors.email || []}\n                            />\n\n                            <Input\n                                value={password}\n                                placeholder=\"Пароль\"\n                                type=\"password\"\n                                name=\"password\"\n                                setValue={(arg) => { setPassword(arg); discardErrors('password'); }}\n                                errors={authErrors.password || []}\n                            /></>}\n\n                            {mode === 'phone' && (\n                                <MaskedInput\n                                    value={phone}\n                                    placeholder=\"Телефон\"\n                                    type=\"text\"\n                                    name=\"phone\"\n                                    mask={\"+38 000 000 00 00\"}\n                                    setValue={(arg: string) => { setPhone(arg); discardErrors('phone'); }}\n                                    errors={authErrors.phone || []}\n                                />\n                            )}\n                        </div>\n\n                        {mode === 'login' && <p\n                            className={`\n                                ${Styles.fpStyle}\n                                ${Styles.largeFPStyle}\n                                ${Styles.tabletFPStyle}\n                                ${Styles.phoneFPStyle}\n                                ${Styles.smallphoneFPStyle}\n                                `}\n                        >\n                            Забули пароль?\n                        </p>}\n\n                        <div className={`\n                            ${Styles.btnStyle}\n                            ${Styles.largeBtnStyle}\n                            ${Styles.tabletBtnStyle}\n                            ${Styles.phoneBtnStyle}\n                            ${Styles.smallphoneBtnStyle}\n                            `}>\n                            {(mode === 'login' || mode === 'register') && <>\n                            <Button\n                                title=\"Продовжити\"\n                                type=\"submit\"\n                                sizeBtn=\"huge\"\n                                background=\"black\"\n                            />\n\n                            <Button\n                                title=\"Увійти з\"\n                                sizeBtn=\"huge\"\n                                background=\"white\"\n                                additionalImage=\"google\"\n                            />\n                            </>}\n\n                            {mode === 'phone' && (\n                                <Button\n                                    title=\"Підтвердити\"\n                                    type=\"submit\"\n                                    sizeBtn=\"huge\"\n                                    background=\"black\"\n                                    disabled={!phone}\n                                />\n                            )}\n                        </div>\n                    </form>\n\n                    {mode !== 'phone' && <div className={`\n                        ${Styles.aaStyle}\n                        ${Styles.largeAAStyle}\n                        ${Styles.tabletAAStyle}\n                        ${Styles.phoneAAStyle}\n                        ${Styles.smallphoneAAStyle}\n                        `}>\n                        <p className={bottomLinkStyles + \" \" + bottomLinkStylesTablet + \" min-[375px]:text-input\"}>Немає аккаунта?</p>\n\n                        <Link className={bottomLinkStyles + \" \" + bottomLinkStylesTablet + \" min-[375px]:text-btn\"} to={`/auth?mode=${link[mode]}`}>\n                            {mode === 'login' ? 'Зареєеструватися' : 'Увійти'}\n                        </Link>\n                    </div>}\n                </div>\n            </div>\n\n            <AuthModal\n                ref={modalRef}\n            />\n\n            {createPortal(<div className={`\n                ${Styles.dialogStyle}\n                ${Styles.largeDialogStyle}\n                ${Styles.tabletDialogStyle}\n                ${Styles.phoneDialogStyle}\n                ${Styles.smallphoneDialogStyle}\n                `}>\n                <div className={`\n                    ${Styles.drStyle}\n                    ${Styles.largeDRStyle}\n                    ${Styles.tabletDRStyle}\n                    ${Styles.phoneDRStyle}\n                    ${Styles.smallphoneDRStyle}\n                    `}>\n                    <div className={`\n                        ${Styles.dsStyle}\n                        ${Styles.largeDSStyle}\n                        ${Styles.tabletDSStyle}\n                        ${Styles.phoneDSStyle}\n                        ${Styles.smallphoneDSStyle}\n                        `}>\n                        <div className=\"relative block w-full pb-[169%]\">\n                            <div className=\"absolute size-full bg-[url('/src/images/Patato.svg')] bg-cover\"></div>\n                        </div>\n                    </div>\n\n                    <p className={`\n                        ${Styles.dtStyle}\n                        ${Styles.largeDTStyle}\n                        ${Styles.tabletDTStyle}\n                        ${Styles.phoneDTStyle}\n                        ${Styles.smallphoneDTStyle}\n                        `}>\n                        Псс...Картопля фрі вже чекає!\n                    </p>\n                </div>\n            </div>, document.body)}\n        </section>\n    </main>)\n}\n\nexport default AuthPage;"],"names":["loginSchema","object","shape","email","string","required","password","min","useAppSelector","useSelector","useAppDispatch","useDispatch","registerSchema","firstName","secondName","_ref","title","background","image","sizeBtn","additionalImage","type","disabled","onClickHandler","btnStyles","transparent","color","black","white","huge","small","google","btnStyle","_jsxs","className","onClick","children","_jsx","_Fragment","placeholder","name","value","setValue","errors","isInvalid","length","isPassword","showPassword","setShowPassword","useState","id","onChange","e","target","classNames","prev","forwardRef","props","ref","setTitle","description","setDescription","leftBtnText","setLeftBtnText","rightBtnText","setRightBtnText","dialogRef","useRef","useImperativeHandle","showModal","current","hideModal","close","onClose","createPortal","Button","document","getElementsByTagName","IMaskMixin","inputRef","autoComplete","AuthPage","setEmail","setPassword","authErrors","setAuthErrors","setFirstName","setSecondName","phone","setPhone","modalRef","navigate","useNavigate","dispatch","state","auth","search","setSearchParams","useSearchParams","mode","get","bottomLinkStyles","bottomLinkStylesTablet","login","register","discardErrors","goBack","onSubmit","async","preventDefault","stopPropagation","validatedData","validate","abortEarly","LoginAction","urlSearch","URLSearchParams","toString","set","replace","slice","err","inner","forEach","item","path","Input","arg","MaskedInput","mask","Link","to","AuthModal","body"],"sourceRoot":""}